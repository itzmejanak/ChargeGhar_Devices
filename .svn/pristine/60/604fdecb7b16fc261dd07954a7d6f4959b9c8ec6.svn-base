package com.demo.controller;

import com.aliyuncs.exceptions.ClientException;
import com.demo.aliyun.*;
import com.demo.bean.DeviceInfo;
import com.demo.common.AppConfig;
import com.demo.common.HttpResult;
import com.demo.message.ReceiveUpload;
import com.demo.serialport.SerialPortData;
import com.demo.serialport.SerialPortException;
import com.demo.tools.ByteUtils;
import com.demo.tools.HttpServletUtils;
import com.demo.tools.SignUtils;
import org.apache.http.HttpStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.*;

@ResponseBody
@Controller
public class ListenController {
    @Autowired
    AppConfig appConfig;

    @Autowired
    MnsUtils mnsUtils;

    @Autowired
    IotUtils iotUtils;

    @Autowired
    RentboxUtils rentboxUtils;


    @RequestMapping("/listen.html")
    public ModelAndView listenHtml() {
        ModelAndView mv = new ModelAndView("/web/views/page/listen");
        mv.addObject("data", appConfig);
        mv.addObject("mns", "http://" + appConfig.getMnsEndpoint());
        mv.addObject("mnsUtils", mnsUtils);
        mv.addObject("lastException", mnsUtils.getException() == null ? "NONE" : mnsUtils.getException().toString());

        return mv;
    }

    @RequestMapping("/listen")
    public HttpResult listen() {
        HttpResult httpResult = new HttpResult();
        List<MessageBody> messages = mnsUtils.getMessageBodys();

        List<Map> data = new ArrayList<>();
        for(MessageBody message : messages){
            Map map = new HashMap();
            map.put("messageId", message.getMessageId());
            map.put("timestamp", message.getTimestamp());
            map.put("topic", message.getTopic());
            map.put("deviceName", message.getDeviceName());
            map.put("messageType", message.getMessageType());

            switch (message.getMessageType()) {
                case "upload":
                    byte[] bytes = message.getPayloadAsBytes();
                    int cmd = SerialPortData.checkCMD(bytes);

                    map.put("data", ByteUtils.to16Hexs(bytes));
                    map.put("cmd", "0x" + ByteUtils.to16Hex(cmd));
                    break;
                case "status":
                    map.put("data", message.getPayloadAsString());
                    map.put("cmd", "0x00");
                    break;
                case "http":
                case "send":
                    map.put("data", message.getPayload());
                    map.put("cmd", "0x00");
                    break;
                default:
                    map.put("data", message.getPayload());
                    map.put("cmd", "0x00");
                    break;

            }
            data.add(map);
        }

        httpResult.setData(data);
        return httpResult;
    }

    @RequestMapping("/listen/start")
    public HttpResult listenStart(HttpServletResponse response) {
        HttpResult httpResult = new HttpResult();
        try {
            mnsUtils.startQueue();
        }
        catch (Exception e){
            response.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);
            httpResult.setCode(response.getStatus());
            httpResult.setMsg(e.toString());
        }

        return httpResult;
    }

    @RequestMapping("/listen/stop")
    public HttpResult listenStop(HttpServletResponse response) {
        HttpResult httpResult = new HttpResult();
        try {
            mnsUtils.stopQueue();
        }
        catch (Exception e){
            response.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);
            httpResult.setCode(response.getStatus());
            httpResult.setMsg(e.toString());
        }
        return httpResult;
    }

    @RequestMapping("/listen/clear")
    public HttpResult listenClear(HttpServletResponse response){
        HttpResult httpResult = new HttpResult();
        mnsUtils.clearMessageBody();
        return httpResult;
    }

    @RequestMapping("/listen/0x10")
    public HttpResult listen0x10(@RequestParam String hexs, HttpServletResponse response){
        HttpResult httpResult = new HttpResult();

        try {
            byte[] bytes = ByteUtils.toBytes(hexs);
            ReceiveUpload receiveUpload = new ReceiveUpload(bytes);
            
            httpResult.setData(receiveUpload.getPowerbanks());
        } catch (SerialPortException e) {
            response.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);
            httpResult.setCode(response.getStatus());
            httpResult.setMsg(e.toString());
            e.printStackTrace();
        }
        return httpResult;
    }


}
