#!/usr/bin/env python3
"""
CSS Extractor Script
Separates CSS from HTML/JSP files and creates clean imports

Usage:
    python split_css.py --list                    # List all HTML/JSP files
    python split_css.py --file <filename>         # Dry run for specific file
    python split_css.py --file <filename> --execute  # Execute extraction
"""

import os
import re
import argparse
import sys
from pathlib import Path
from typing import List, Tuple, Optional

class CSSExtractor:
    def __init__(self):
        self.webapp_root = "src/main/webapp"
        self.css_dir = "src/main/webapp/web/resource/css"
        self.supported_extensions = ['.html', '.jsp']
        
    def find_html_jsp_files(self) -> List[str]:
        """Find all HTML and JSP files in the webapp directory"""
        files = []
        for root, dirs, filenames in os.walk(self.webapp_root):
            for filename in filenames:
                if any(filename.endswith(ext) for ext in self.supported_extensions):
                    files.append(os.path.join(root, filename))
        return sorted(files)
    
    def extract_css_from_file(self, filepath: str) -> Tuple[str, List[str], str]:
        """
        Extract CSS from HTML/JSP file
        Returns: (original_content, css_blocks, cleaned_content)
        """
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            print(f"‚ùå Error reading {filepath}: {e}")
            return "", [], ""
        
        # Find all <style> blocks
        style_pattern = r'<style[^>]*>(.*?)</style>'
        css_blocks = re.findall(style_pattern, content, re.DOTALL | re.IGNORECASE)
        
        # Remove <style> blocks from content
        cleaned_content = re.sub(style_pattern, '', content, flags=re.DOTALL | re.IGNORECASE)
        
        # Clean up extra whitespace
        cleaned_content = re.sub(r'\n\s*\n\s*\n', '\n\n', cleaned_content)
        
        return content, css_blocks, cleaned_content
    
    def generate_css_filename(self, filepath: str) -> str:
        """Generate CSS filename based on original file"""
        filename = Path(filepath).stem
        
        # Clean filename for CSS
        css_name = filename.lower()
        css_name = re.sub(r'[^a-z0-9_-]', '-', css_name)
        css_name = re.sub(r'-+', '-', css_name).strip('-')
        
        return f"{css_name}.css"
    
    def create_css_content(self, css_blocks: List[str], filepath: str) -> str:
        """Create clean CSS content with header"""
        if not css_blocks:
            return ""
        
        filename = Path(filepath).name
        header = f"""/*
 * Extracted CSS from {filename}
 * Generated automatically by split_css.py
 * Do not edit this file directly - modify the original source
 */

"""
        
        # Combine all CSS blocks
        combined_css = ""
        for i, block in enumerate(css_blocks):
            if i > 0:
                combined_css += "\n\n/* ===== CSS Block {} ===== */\n".format(i + 1)
            
            # Clean up the CSS block
            clean_block = block.strip()
            # Remove extra indentation
            lines = clean_block.split('\n')
            min_indent = float('inf')
            for line in lines:
                if line.strip():
                    indent = len(line) - len(line.lstrip())
                    min_indent = min(min_indent, indent)
            
            if min_indent != float('inf') and min_indent > 0:
                lines = [line[min_indent:] if len(line) > min_indent else line for line in lines]
            
            combined_css += '\n'.join(lines)
        
        return header + combined_css
    
    def generate_css_import(self, css_filename: str, file_extension: str) -> str:
        """Generate appropriate CSS import statement"""
        css_path = f"/web/resource/css/{css_filename}"
        
        if file_extension == '.jsp':
            return f'    <link rel="stylesheet" type="text/css" href="<%=request.getContextPath()%>{css_path}">'
        else:  # .html (FreeMarker)
            return f'    <link rel="stylesheet" type="text/css" href="${{_contextPath}}{css_path}">'
    
    def insert_css_import(self, content: str, css_import: str) -> str:
        """Insert CSS import into HTML head section"""
        # Try to find existing CSS imports or head section
        head_pattern = r'(<head[^>]*>)'
        match = re.search(head_pattern, content, re.IGNORECASE)
        
        if match:
            # Insert after <head> tag
            insert_pos = match.end()
            return content[:insert_pos] + '\n' + css_import + content[insert_pos:]
        
        # Fallback: insert before </head>
        head_end_pattern = r'(</head>)'
        match = re.search(head_end_pattern, content, re.IGNORECASE)
        
        if match:
            insert_pos = match.start()
            return content[:insert_pos] + css_import + '\n' + content[insert_pos:]
        
        # If no head section found, add at the beginning
        return css_import + '\n' + content
    
    def dry_run(self, filepath: str) -> None:
        """Show what would be done without making changes"""
        print(f"\nüîç DRY RUN: Analyzing {filepath}")
        print("=" * 60)
        
        if not os.path.exists(filepath):
            print(f"‚ùå File not found: {filepath}")
            return
        
        original_content, css_blocks, cleaned_content = self.extract_css_from_file(filepath)
        
        if not css_blocks:
            print("‚ÑπÔ∏è  No CSS blocks found in this file")
            return
        
        css_filename = self.generate_css_filename(filepath)
        css_content = self.create_css_content(css_blocks, filepath)
        file_extension = Path(filepath).suffix
        css_import = self.generate_css_import(css_filename, file_extension)
        
        print(f"üìÅ Original file: {filepath}")
        print(f"üìÑ CSS file to create: {os.path.join(self.css_dir, css_filename)}")
        print(f"üìä CSS blocks found: {len(css_blocks)}")
        print(f"üìè Original file size: {len(original_content)} chars")
        print(f"üìè Cleaned file size: {len(cleaned_content)} chars")
        print(f"üìè CSS content size: {len(css_content)} chars")
        
        print(f"\nüîó CSS import to add:")
        print(css_import)
        
        print(f"\nüìù CSS content preview (first 300 chars):")
        print("-" * 40)
        print(css_content[:300] + ("..." if len(css_content) > 300 else ""))
        print("-" * 40)
        
        # Show size reduction
        reduction = len(original_content) - len(cleaned_content)
        percentage = (reduction / len(original_content)) * 100 if original_content else 0
        print(f"\nüìâ Size reduction: {reduction} chars ({percentage:.1f}%)")
    
    def execute_extraction(self, filepath: str) -> bool:
        """Execute the CSS extraction"""
        print(f"\n‚ö° EXECUTING: Extracting CSS from {filepath}")
        print("=" * 60)
        
        if not os.path.exists(filepath):
            print(f"‚ùå File not found: {filepath}")
            return False
        
        # Create CSS directory if it doesn't exist
        os.makedirs(self.css_dir, exist_ok=True)
        
        original_content, css_blocks, cleaned_content = self.extract_css_from_file(filepath)
        
        if not css_blocks:
            print("‚ÑπÔ∏è  No CSS blocks found in this file")
            return True
        
        css_filename = self.generate_css_filename(filepath)
        css_filepath = os.path.join(self.css_dir, css_filename)
        css_content = self.create_css_content(css_blocks, filepath)
        file_extension = Path(filepath).suffix
        css_import = self.generate_css_import(css_filename, file_extension)
        
        try:
            # Write CSS file
            with open(css_filepath, 'w', encoding='utf-8') as f:
                f.write(css_content)
            print(f"‚úÖ Created CSS file: {css_filepath}")
            
            # Update original file
            updated_content = self.insert_css_import(cleaned_content, css_import)
            
            # Create backup
            backup_path = filepath + '.backup'
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(original_content)
            print(f"üíæ Created backup: {backup_path}")
            
            # Write updated file
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(updated_content)
            print(f"‚úÖ Updated original file: {filepath}")
            
            # Show statistics
            reduction = len(original_content) - len(updated_content)
            percentage = (reduction / len(original_content)) * 100 if original_content else 0
            print(f"üìä Size reduction: {reduction} chars ({percentage:.1f}%)")
            print(f"üìä CSS blocks extracted: {len(css_blocks)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Error during extraction: {e}")
            return False
    
    def list_files(self) -> None:
        """List all HTML/JSP files"""
        files = self.find_html_jsp_files()
        
        print(f"\nüìã Found {len(files)} HTML/JSP files:")
        print("=" * 60)
        
        for i, filepath in enumerate(files, 1):
            # Check if file has CSS
            _, css_blocks, _ = self.extract_css_from_file(filepath)
            css_indicator = "üé®" if css_blocks else "  "
            
            rel_path = os.path.relpath(filepath, self.webapp_root)
            print(f"{i:2d}. {css_indicator} {rel_path}")
        
        print(f"\nüé® = Contains CSS blocks")
        print(f"üìÅ Base directory: {self.webapp_root}")

def main():
    parser = argparse.ArgumentParser(
        description="Extract CSS from HTML/JSP files",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python split_css.py --list
  python split_css.py --file src/main/webapp/web/views/page/index.html
  python split_css.py --file src/main/webapp/web/views/page/index.html --execute
        """
    )
    
    parser.add_argument('--list', action='store_true', 
                       help='List all HTML/JSP files')
    parser.add_argument('--file', type=str, 
                       help='Process specific file')
    parser.add_argument('--execute', action='store_true', 
                       help='Execute the extraction (default is dry run)')
    
    args = parser.parse_args()
    
    extractor = CSSExtractor()
    
    if args.list:
        extractor.list_files()
    elif args.file:
        if args.execute:
            success = extractor.execute_extraction(args.file)
            sys.exit(0 if success else 1)
        else:
            extractor.dry_run(args.file)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()